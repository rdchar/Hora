// source: hypernetwork.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Hn.DeleteHsMsg', null, global);
goog.exportSymbol('proto.Hn.EmptyMsg', null, global);
goog.exportSymbol('proto.Hn.HelloMsg', null, global);
goog.exportSymbol('proto.Hn.HnByStringMsg', null, global);
goog.exportSymbol('proto.Hn.HnMsg', null, global);
goog.exportSymbol('proto.Hn.HsMsg', null, global);
goog.exportSymbol('proto.Hn.HsMsg.HsType', null, global);
goog.exportSymbol('proto.Hn.VertexMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.HelloMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hn.HelloMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.HelloMsg.displayName = 'proto.Hn.HelloMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.VertexMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hn.VertexMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.VertexMsg.displayName = 'proto.Hn.VertexMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.HsMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Hn.HsMsg.repeatedFields_, null);
};
goog.inherits(proto.Hn.HsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.HsMsg.displayName = 'proto.Hn.HsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.DeleteHsMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hn.DeleteHsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.DeleteHsMsg.displayName = 'proto.Hn.DeleteHsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.HnMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hn.HnMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.HnMsg.displayName = 'proto.Hn.HnMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.HnByStringMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Hn.HnByStringMsg.repeatedFields_, null);
};
goog.inherits(proto.Hn.HnByStringMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.HnByStringMsg.displayName = 'proto.Hn.HnByStringMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hn.EmptyMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hn.EmptyMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hn.EmptyMsg.displayName = 'proto.Hn.EmptyMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.HelloMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.HelloMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.HelloMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HelloMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    hello: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.HelloMsg}
 */
proto.Hn.HelloMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.HelloMsg;
  return proto.Hn.HelloMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.HelloMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.HelloMsg}
 */
proto.Hn.HelloMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHello(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.HelloMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.HelloMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.HelloMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HelloMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hello = 1;
 * @return {string}
 */
proto.Hn.HelloMsg.prototype.getHello = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HelloMsg} returns this
 */
proto.Hn.HelloMsg.prototype.setHello = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.VertexMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.VertexMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.VertexMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.VertexMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    vertex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.VertexMsg}
 */
proto.Hn.VertexMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.VertexMsg;
  return proto.Hn.VertexMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.VertexMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.VertexMsg}
 */
proto.Hn.VertexMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVertex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.VertexMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.VertexMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.VertexMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.VertexMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVertex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vertex = 1;
 * @return {string}
 */
proto.Hn.VertexMsg.prototype.getVertex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.VertexMsg} returns this
 */
proto.Hn.VertexMsg.prototype.setVertex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Hn.HsMsg.repeatedFields_ = [2,3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.HsMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.HsMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.HsMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HsMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    vertex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    simplexList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    partofList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    hstype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    r: jspb.Message.getFieldWithDefault(msg, 5, ""),
    t: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    n: jspb.Message.getFieldWithDefault(msg, 8, ""),
    psi: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.HsMsg}
 */
proto.Hn.HsMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.HsMsg;
  return proto.Hn.HsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.HsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.HsMsg}
 */
proto.Hn.HsMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVertex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSimplex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPartof(value);
      break;
    case 4:
      var value = /** @type {!proto.Hn.HsMsg.HsType} */ (reader.readEnum());
      msg.setHstype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setR(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setT(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addM(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setN(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPsi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.HsMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.HsMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.HsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HsMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVertex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSimplexList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPartofList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getHstype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getR();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getT();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getN();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPsi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Hn.HsMsg.HsType = {
  VERTEX: 0,
  ALPHA: 1,
  BETA: 2
};

/**
 * optional string vertex = 1;
 * @return {string}
 */
proto.Hn.HsMsg.prototype.getVertex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setVertex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string simplex = 2;
 * @return {!Array<string>}
 */
proto.Hn.HsMsg.prototype.getSimplexList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setSimplexList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.addSimplex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.clearSimplexList = function() {
  return this.setSimplexList([]);
};


/**
 * repeated string partOf = 3;
 * @return {!Array<string>}
 */
proto.Hn.HsMsg.prototype.getPartofList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setPartofList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.addPartof = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.clearPartofList = function() {
  return this.setPartofList([]);
};


/**
 * optional HsType hsType = 4;
 * @return {!proto.Hn.HsMsg.HsType}
 */
proto.Hn.HsMsg.prototype.getHstype = function() {
  return /** @type {!proto.Hn.HsMsg.HsType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Hn.HsMsg.HsType} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setHstype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string R = 5;
 * @return {string}
 */
proto.Hn.HsMsg.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setR = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 t = 6;
 * @return {number}
 */
proto.Hn.HsMsg.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setT = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string M = 7;
 * @return {!Array<string>}
 */
proto.Hn.HsMsg.prototype.getMList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setMList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.addM = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.clearMList = function() {
  return this.setMList([]);
};


/**
 * optional string N = 8;
 * @return {string}
 */
proto.Hn.HsMsg.prototype.getN = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setN = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string psi = 9;
 * @return {string}
 */
proto.Hn.HsMsg.prototype.getPsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HsMsg} returns this
 */
proto.Hn.HsMsg.prototype.setPsi = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.DeleteHsMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.DeleteHsMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.DeleteHsMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.DeleteHsMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    vertex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    r: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.DeleteHsMsg}
 */
proto.Hn.DeleteHsMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.DeleteHsMsg;
  return proto.Hn.DeleteHsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.DeleteHsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.DeleteHsMsg}
 */
proto.Hn.DeleteHsMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVertex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setR(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.DeleteHsMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.DeleteHsMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.DeleteHsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.DeleteHsMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVertex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getR();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string vertex = 1;
 * @return {string}
 */
proto.Hn.DeleteHsMsg.prototype.getVertex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.DeleteHsMsg} returns this
 */
proto.Hn.DeleteHsMsg.prototype.setVertex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string R = 2;
 * @return {string}
 */
proto.Hn.DeleteHsMsg.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.DeleteHsMsg} returns this
 */
proto.Hn.DeleteHsMsg.prototype.setR = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.HnMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.HnMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.HnMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HnMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hnMap: (f = msg.getHnMap()) ? f.toObject(includeInstance, proto.Hn.HsMsg.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.HnMsg}
 */
proto.Hn.HnMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.HnMsg;
  return proto.Hn.HnMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.HnMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.HnMsg}
 */
proto.Hn.HnMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getHnMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Hn.HsMsg.deserializeBinaryFromReader, "", new proto.Hn.HsMsg());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.HnMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.HnMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.HnMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HnMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHnMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Hn.HsMsg.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Hn.HnMsg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HnMsg} returns this
 */
proto.Hn.HnMsg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, HsMsg> Hn = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Hn.HsMsg>}
 */
proto.Hn.HnMsg.prototype.getHnMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Hn.HsMsg>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.Hn.HsMsg));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Hn.HnMsg} returns this
 */
proto.Hn.HnMsg.prototype.clearHnMap = function() {
  this.getHnMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Hn.HnByStringMsg.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.HnByStringMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.HnByStringMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.HnByStringMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HnByStringMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hnList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.HnByStringMsg}
 */
proto.Hn.HnByStringMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.HnByStringMsg;
  return proto.Hn.HnByStringMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.HnByStringMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.HnByStringMsg}
 */
proto.Hn.HnByStringMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.HnByStringMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.HnByStringMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.HnByStringMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.HnByStringMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Hn.HnByStringMsg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hn.HnByStringMsg} returns this
 */
proto.Hn.HnByStringMsg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string hn = 2;
 * @return {!Array<string>}
 */
proto.Hn.HnByStringMsg.prototype.getHnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Hn.HnByStringMsg} returns this
 */
proto.Hn.HnByStringMsg.prototype.setHnList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Hn.HnByStringMsg} returns this
 */
proto.Hn.HnByStringMsg.prototype.addHn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Hn.HnByStringMsg} returns this
 */
proto.Hn.HnByStringMsg.prototype.clearHnList = function() {
  return this.setHnList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hn.EmptyMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Hn.EmptyMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hn.EmptyMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.EmptyMsg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hn.EmptyMsg}
 */
proto.Hn.EmptyMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hn.EmptyMsg;
  return proto.Hn.EmptyMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hn.EmptyMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hn.EmptyMsg}
 */
proto.Hn.EmptyMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hn.EmptyMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hn.EmptyMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hn.EmptyMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hn.EmptyMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.Hn);
