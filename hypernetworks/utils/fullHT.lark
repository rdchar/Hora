?start:         "hn:"? (assign? hn)* ("lambdas:" lambdas+)? ("psis:" psis+)? ("phis:" phis+)?

hn:             hs
              | "(" hn ")"

hs:             alpha
              | immutable_alpha
              | beta
              | empty_alpha
              | empty_beta
              | relation

immutable_alpha: "!" alpha
alpha:          "<" a_simplex r? time? coordinate? boundary? psi? phi? where? ">" level?
beta:           "{" b_simplex r? time? boundary? "}" level?
empty_alpha:    "<>"
empty_beta:     "{}"

?a_simplex:     a_vertex ("," a_vertex)*
?a_vertex:      vertex
              | WILDCARD

?b_simplex:     vertex ("," vertex)*

vertex:         (NAME | property | assign? hs) typed?
property:       "~" NAME
immutable:      "!" NAME "="

assign:         NAME "="

r:              ";" "R" ("_" NAME)?
time:           ";" "t_" NUMBER
coordinate:     ";" "C(" X ("," Y ("," Z)?)? ")"
boundary:       ";" "B(" NAME ("," NAME)* ")"
psi:            ";" "psi_" NAME
phi:            ";" "phi_" NAME
level:          "^N" LEVEL*

typed:          "::" TYPE

vname:          "v_" NUMBER
rname:          NAME

neg:            "-" hn      // minus == add hn neg hn


// Lambda functions for R
lambdas:        assign lambda_expr ";"
lambda_expr:    "\\\\" vname ("," vname)* "." lambda_expr
              | "(" lambda_expr ")"
              | expr
expr:           vname
              | expr (logic_and | logic_or | rname) expr
              | "(" expr ")"
              | rname "(" vname ("," vname)* ")"


// Simple relations
where:          "|" rels_expr
relation:       rel_assign rels_expr ";"
rel_assign:     NAME "->"
?rels_expr:     vname
              | rels_expr (pred rels_expr)+
              | "(" rels_expr ")"
              | pred "(" rels_expr ("," rels_expr)+ ")"
pred:           "/" PRED "/"
              | logic_and
              | logic_or


// Psi functions for vertices
psis:           NAME "=" NAME
phis:           NAME "=" NAME


// Terminals
NAME:           "-" | DECIMAL | (LETTER | DIGIT | "-" | "_" | "^" | "." | "&" | ":")+
NUMBER:         DIGIT+
DECIMAL:        DIGIT+ "." DIGIT+
TYPE:           NAME
N:              "N"
LEVEL:          ("+" | "-") (NUMBER | LETTER)
PRED:           NAME
WILDCARD:       "*"
X:              DIGIT+
Y:              DIGIT+
Z:              DIGIT+


logic_and:      "\/\\" | "AND"
logic_or:       "\\/"  | "OR"


COMMENT:        /#.*/
%ignore WS
%ignore COMMENT
%import common.LETTER
%import common.DIGIT
%import common.WS
%import common.NEWLINE
