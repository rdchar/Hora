?start:         ("relations" "[" rels+ "]")? (assign? hn)+

rels:           assign lambda_expr ";"
              // | assign wexpr (";" assign wexpr)* ";"?

hn:             hs
              | "(" hn ")"

hs:             alpha
              | beta
              | empty_alpha
              | empty_beta
alpha:          "<" a_simplex r? where? time? atomicity? psi? ">" level?
beta:           "{" b_simplex r? time? atomicity? "}" level?
empty_alpha:    "<>"
empty_beta:     "{}"

?a_simplex:     a_vertex ("," a_vertex)*
?a_vertex:      vertex
              | sequence
              | immutable
              | mandatory

?b_simplex:     vertex ("," vertex)*

vertex:         (NAME | assign? hs) typed?
sequence:       "(" NAME ")"
immutable:      "[" NAME "]"
mandatory:      "!" NAME

assign:         NAME "="
r:              ";" "R" ("_" NAME)?
time:           ";" "t_" NUMBER
atomicity:      ";" "A(" NAME ("," NAME)* ")"
psi:            ";" "psi_" NAME
level:          "^" N LEVEL*

where:          "|" wexpr
?wexpr:         typed
              | vname+
              | named_rel
              | "(" wexpr ")"

named_rel:      wexpr rname wexpr
// TODO need to add ability to specify n-ary, e.g. x = above[v_1, v_2, v_3, v_4];
//              | rname "[" vname ("," vname)* "]"

//named_rel:      wexpr? rname (wexpr | "[" vname ( "," vname)* "]")

typed:          ":" TYPE

vname:          "v_" NUMBER
rname:          NAME


neg:            "-" hn      // minus == add hn neg hn

lambda_expr:    "\\\\" vname ("," vname)* "." lambda_expr
              | "(" lambda_expr ")"
              | expr

expr:           vname
              | expr (logic_and | logic_or | rname) expr
              | "(" expr ")"
              | rname "(" vname ("," vname)* ")"


// Terminals
NAME:           "-" | DECIMAL | (LETTER (LETTER | DIGIT | "-" | "_" | "^" | "." | "&")*)
NUMBER:         DIGIT+
DECIMAL:        DIGIT+ "." DIGIT+
TYPE:           NAME
N:              "N"
LEVEL:          ("+" | "-") (NUMBER | LETTER)

logic_and:      "\/\\"
logic_or:       "\\/"


COMMENT:        /#.*/
%ignore WS
%ignore COMMENT
%import common.LETTER
%import common.DIGIT
%import common.WS
%import common.NEWLINE
